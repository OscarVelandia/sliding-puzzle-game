{"version":3,"sources":["GameBoard.events.ts","../utils.ts","GameBoard.ts"],"names":[],"mappings":";AAU6B,aAV7B,SAAS,EAAmB,GAUC,IAAA,EAR3B,OAAiB,QAAjB,EADmB,SAAS,eAAe,uBAC1B,IAAA,OAAA,EAAA,EAAE,iBAAiB,QAAS,GAG/C,SAAS,EAAkB,GAKE,IAAA,EAH3B,OAAkB,QAAlB,EADoB,SAAS,eAAe,gBAC1B,IAAA,OAAA,EAAA,EAAE,iBAAiB,QAAS,GAGnB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAApB,QAAA,mBAAA,EAAoB,QAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8EhB,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxFb,IAAA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCAEa,QAAA,YAAc,SAAC,GACpB,IAAA,EAAU,SAAS,eAAe,GAExB,OAAZ,IACF,EAAQ,MAAM,QAAU,UAIf,QAAA,YAAc,SAAC,GACpB,IAAA,EAAU,SAAS,eAAe,GAExB,OAAZ,IACF,EAAQ,MAAM,QAAU,SAIf,QAAA,sBAAwB,SAAC,GACpC,SAAS,iBAAiB,GAAkB,QAAQ,SAAA,GAAM,OAAA,EAAG,YAGlD,QAAA,aAAe,WACnB,OAAA,KAAK,SAAW,IAGZ,QAAA,mBAAqB,SAAC,EAAgB,GAC1C,OAAA,IAAW,GAGP,QAAA,SAAW,WAEpB,OAAA,KAAK,SACF,SAAS,IACT,UAAU,GAAK,KAAK,MAAM,SAAS,KAI7B,QAAA,YAAc,SACzB,EACA,EACA,EACA,EACA,GAEM,IAAA,EAAM,IAAI,MAOT,OANP,EAAI,IAAM,EACV,EAAI,IAAM,EACV,EAAI,MAAQ,EACZ,EAAI,GAAK,EACT,EAAI,UAAY,EAChB,EAAI,QAAU,EACP,GAGI,QAAA,sBAAwB,SACnC,EACA,GAEO,OAAA,EAAc,MAAM,SAAC,EAAM,GAAQ,OAAA,IAAS,EAAc,MAGtD,QAAA,yBAA2B,SACtC,EACA,GAGK,OAAA,EAAA,MAAM,EAAQ,EAAS,GACvB,KAAK,GAEL,IAAI,SAAA,GAAK,OAAA,QAAA,eAIH,QAAA,kBAA8B,CACzC,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA;;ACwFO,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/LT,IAAA,EAAA,QAAA,sBACA,EAAA,QAAA,YAYM,EAAY,WACV,IAGF,EAGA,EACA,EAPE,EAAQ,EAER,EAAc,EAAA,yBAAyB,EAD9B,GAGX,EAAU,EACV,EAAQ,EAOH,SAAA,EAAU,GACT,IAAA,EAAW,EAAX,OACF,EAAc,EAAgC,UAAU,SAAA,GAC5D,OAAA,EAAA,mBAAmB,EAAM,GAAI,EAAO,MAEhC,EAAY,EAAgC,UAChD,SAAgB,GACP,YAAY,IADL,EAAA,EAAA,GAAA,KAOd,GA4FG,SACP,EACA,GAEM,IAAA,EAAY,EAAY,IAAiB,EACzC,EAAc,EAAY,IAAgB,EAC1C,EAAe,EAAY,GAAgB,EAC3C,EAAc,EAAY,IAAiB,EAE7C,GAAA,GAAe,IAAM,GAAe,GAAgB,GAC/C,OAAA,EAGL,GAAA,GAAe,KAAO,GAAa,GAAgB,GAC9C,OAAA,EAGL,GAAA,GAAa,GAAe,GAAgB,EACvC,OAAA,EAGF,OAAA,EAnHiB,CAAyB,EAAa,GAEzC,CACM,IAAlB,EAAkB,EAAA,EAAgC,GADtC,GAAA,GAEZ,EAAe,EAAA,EAAgC,GAFnC,GAAA,IAsBd,SAA4B,EAAqB,GAIpD,IAAA,EAAA,CACF,EAAgC,GAChC,EAAgC,IAJhC,EAAgC,GAFuC,EAAA,GAGvE,EAAgC,GAHuC,EAAA,GAlBvE,CAA4B,EAAa,GA4BpC,SAAiB,EAAwB,GAwH3C,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAvHC,EAAe,SAAS,eAC5B,GAEI,EAAY,SAAS,eAAe,GAGpC,EAAO,SAAS,cAAc,OAEZ,QAAxB,EAAY,QAAZ,EAAA,SAAY,IAAA,OAAA,EAAA,EAAE,kBAAU,IAAA,GAAA,EAAE,aAAa,EAAM,GACxB,QAArB,EAAS,QAAT,EAAA,SAAS,IAAA,OAAA,EAAA,EAAE,kBAAU,IAAA,GAAA,EAAE,aAAa,EAAc,GAClC,QAAhB,EAAI,QAAJ,EAAA,SAAI,IAAA,OAAA,EAAA,EAAE,kBAAU,IAAA,GAAA,EAAE,aAAa,EAAW,GAC1B,QAAhB,EAAI,QAAJ,EAAA,SAAI,IAAA,OAAA,EAAA,EAAE,kBAAU,IAAA,GAAA,EAAE,YAAY,GAvC5B,CAAiB,EAAgB,GAOhB,EAAA,sBACjB,EACA,IAIA,EAAA,YAAY,SAXZ,GAAY,IAwCP,SAAA,EAAS,GACV,IAAA,EAAY,SAAS,eAAe,cACpC,EAAY,SAAS,cAAc,OACzC,EAAU,GAAK,aAQR,SACP,EACA,GAEA,EAAc,QAAQ,SAAC,GACiB,IAAA,EAAA,EAAA,EADH,GAC5B,EAD4B,EAAA,GACxB,EADwB,EAAA,GAE7B,EAAyB,EAAmB,UAAU,SAAA,GAC1D,OAAA,EAAA,mBAAmB,EAAK,GAAI,KAExB,EAAwB,EAAA,YAC5B,EACA,EACa,aAAA,OAAA,EAAyB,GACtC,QACA,GAEF,EAAU,YAAY,KAtBxB,CAAc,EAAW,GAEzB,EAAU,YAAY,GACtB,EAAmB,OAAO,YAAY,EAAgB,KAuB/C,SAAA,EAAiC,GACxC,EAAqB,EAAI,GAAO,IAAI,SAAC,EAAI,GAChC,MAAA,CAAC,EAAI,EAAA,kBAAkB,MAE1B,IAAA,EAAsB,EAAI,GAAoB,KAAK,EAAA,cAEzD,EACK,GAAA,OAAA,EAAA,GACH,CAAA,CAAC,kBAAc,KAGjB,EAAS,GA2BF,SAAA,IACP,EAAA,sBAAsB,UACtB,EAAA,sBAAsB,eACtB,EAAiC,GACjC,EAAA,YAAY,SACZ,cAAc,GACd,EAAU,EACV,GAAY,GAGL,SAAA,IACe,SAAS,eAC7B,gBAGY,UAAY,OAAO,GACjC,GAAW,EAGJ,SAAA,EAAY,GACb,IAAA,EAAU,SAAS,eAAe,SACxC,EAAQ,EAAa,EAAK,GAAS,EACnC,EAAQ,UAAY,OAAO,GA1J7B,EAAiC,GA8J/B,EAAA,mBAAmB,WACjB,MAGF,EAAA,kBAAkB,WAChB,OAKN","file":"GameBoard.ff54d9f3.js","sourceRoot":"../src/pages","sourcesContent":["function onClickRestartGame(listener: EventListenerOnClickMethod): void {\n  const showButton = document.getElementById('restart-game');\n  return showButton?.addEventListener('click', listener);\n}\n\nfunction onClickSetNewGame(listener: EventListenerOnClickMethod): void {\n  const resetButton = document.getElementById('reset');\n  return resetButton?.addEventListener('click', listener);\n}\n\nexport { onClickRestartGame, onClickSetNewGame };\n","import part1 from './assets/img/row-1-col-1.jpg';\nimport part2 from './assets/img/row-1-col-2.jpg';\nimport part3 from './assets/img/row-1-col-3.jpg';\nimport part4 from './assets/img/row-1-col-4.jpg';\nimport part5 from './assets/img/row-2-col-1.jpg';\nimport part6 from './assets/img/row-2-col-2.jpg';\nimport part7 from './assets/img/row-2-col-3.jpg';\nimport part8 from './assets/img/row-2-col-4.jpg';\nimport part9 from './assets/img/row-3-col-1.jpg';\nimport part10 from './assets/img/row-3-col-2.jpg';\nimport part11 from './assets/img/row-3-col-3.jpg';\nimport part12 from './assets/img/row-3-col-4.jpg';\nimport part13 from './assets/img/row-4-col-1.jpg';\nimport part14 from './assets/img/row-4-col-2.jpg';\nimport part15 from './assets/img/row-4-col-3.jpg';\n\nexport const showElement = (elementId: string) => {\n  const element = document.getElementById(elementId);\n\n  if (element !== null) {\n    element.style.display = 'block';\n  }\n};\n\nexport const hideElement = (elementId: string) => {\n  const element = document.getElementById(elementId);\n\n  if (element !== null) {\n    element.style.display = 'none';\n  }\n};\n\nexport const removeElementsFromDOM = (elementClassOrId: string): void => {\n  document.querySelectorAll(elementClassOrId).forEach(el => el.remove());\n};\n\nexport const shuffleItems = () => {\n  return Math.random() - 0.5;\n};\n\nexport const findArrayIndexById = (slotId: string, clickedSlotId: string) => {\n  return slotId === clickedSlotId;\n};\n\nexport const uniqueId = () => {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2) + Date.now().toString(36)\n  );\n};\n\nexport const createImage = (\n  imgSrc: ImageURL,\n  id: ID,\n  alt: string,\n  className: string,\n  onClick: HTMLElementClickMethod,\n) => {\n  const img = new Image();\n  img.src = imgSrc;\n  img.alt = alt;\n  img.title = alt;\n  img.id = id;\n  img.className = className;\n  img.onclick = onClick;\n  return img;\n};\n\nexport const compareArraysEquality = (\n  originalBoard: PairImageAndUrl[],\n  modifiedBoard: PairImageAndUrlWithEmptySlot[],\n) => {\n  return originalBoard.every((item, idx) => item === modifiedBoard[idx]);\n};\n\nexport const createSlidingPuzzleSlots = (\n  width: number,\n  height: number,\n): ID[] => {\n  return [\n    ...Array(width * height - 1)\n      .fill(0)\n      // eslint-disable-next-line no-unused-vars\n      .map(_ => uniqueId()),\n  ];\n};\n\nexport const puzzleImageRoutes: string[] = [\n  part1,\n  part2,\n  part3,\n  part4,\n  part5,\n  part6,\n  part7,\n  part8,\n  part9,\n  part10,\n  part11,\n  part12,\n  part13,\n  part14,\n  part15,\n];\n","import { onClickSetNewGame, onClickRestartGame } from './GameBoard.events';\nimport {\n  compareArraysEquality,\n  createImage,\n  hideElement,\n  puzzleImageRoutes,\n  showElement,\n  shuffleItems,\n  createSlidingPuzzleSlots,\n  findArrayIndexById,\n  removeElementsFromDOM,\n} from '../utils';\n\nconst GameBoard = (): void => {\n  const width = 4;\n  const height = 4;\n  const puzzleSlots = createSlidingPuzzleSlots(width, height);\n  let gameTimeInterval: number;\n  let counter = 0;\n  let moves = 0;\n  let shuffledBoardSlotsWithEmptySlot: PairImageAndUrlWithEmptySlot[];\n  let originalBoardSlots: PairImageAndUrl[];\n\n  shuffleImagesAndCreateSlotsArray(puzzleSlots);\n  setListeners();\n\n  function movePiece(evt: Event) {\n    const { target } = evt as HTMLElementEvent<HTMLImageElement>;\n    const clickedSlot = shuffledBoardSlotsWithEmptySlot.findIndex(slots =>\n      findArrayIndexById(slots[0], target.id),\n    );\n    const emptySlot = shuffledBoardSlotsWithEmptySlot.findIndex(\n      ([, slotUrl]) => {\n        return slotUrl === undefined;\n      },\n    );\n\n    const pieceCanBeMoved = getMovementDisponibility(clickedSlot, emptySlot);\n\n    if (pieceCanBeMoved) {\n      const [selectedSlotId] = shuffledBoardSlotsWithEmptySlot[clickedSlot];\n      const [emptySlotId] = shuffledBoardSlotsWithEmptySlot[emptySlot];\n\n      swapclickedItemInSlotsArray(clickedSlot, emptySlot);\n      swapHTMLElements(selectedSlotId, emptySlotId);\n      checkIfGameWasWon();\n      updateMoves(false);\n    }\n  }\n\n  function checkIfGameWasWon() {\n    const gameWasWon = compareArraysEquality(\n      originalBoardSlots,\n      shuffledBoardSlotsWithEmptySlot,\n    );\n\n    if (gameWasWon) {\n      showElement('reset');\n    }\n  }\n\n  function swapclickedItemInSlotsArray(clickedSlot: number, emptySlot: number) {\n    [\n      shuffledBoardSlotsWithEmptySlot[clickedSlot],\n      shuffledBoardSlotsWithEmptySlot[emptySlot],\n    ] = [\n      shuffledBoardSlotsWithEmptySlot[emptySlot],\n      shuffledBoardSlotsWithEmptySlot[clickedSlot],\n    ];\n  }\n\n  function swapHTMLElements(selectedSlotId: string, emptySlotId: string) {\n    const selectedSlot = document.getElementById(\n      selectedSlotId,\n    ) as HTMLImageElement;\n    const emptySlot = document.getElementById(emptySlotId) as HTMLDivElement;\n\n    // create marker element and insert it where obj1 is\n    const temp = document.createElement('div');\n\n    selectedSlot?.parentNode?.insertBefore(temp, selectedSlot);\n    emptySlot?.parentNode?.insertBefore(selectedSlot, emptySlot);\n    temp?.parentNode?.insertBefore(emptySlot, temp);\n    temp?.parentNode?.removeChild(temp);\n  }\n\n  function addSlots(imagesWithIds: PairImageAndUrl[]): void {\n    const gameBoard = document.getElementById('game-board') as HTMLDivElement;\n    const emptySlot = document.createElement('div') as HTMLDivElement;\n    emptySlot.id = 'empty-slot';\n\n    addImageSlots(gameBoard, imagesWithIds);\n\n    gameBoard.appendChild(emptySlot);\n    gameTimeInterval = window.setInterval(setElapsedTime, 1000);\n  }\n\n  function addImageSlots(\n    gameBoard: HTMLDivElement,\n    imagesWithIds: PairImageAndUrl[],\n  ) {\n    imagesWithIds.forEach((pair): void => {\n      const [id, imgUrl]: PairImageAndUrl = pair;\n      const imageIdInOriginalOrder = originalBoardSlots.findIndex(slot =>\n        findArrayIndexById(slot[0], id),\n      );\n      const puzzleSlotsWithImages = createImage(\n        imgUrl,\n        id,\n        `piece no. ${imageIdInOriginalOrder + 1}`,\n        'piece',\n        movePiece,\n      );\n      gameBoard.appendChild(puzzleSlotsWithImages);\n    });\n  }\n\n  function shuffleImagesAndCreateSlotsArray(slots: string[]) {\n    originalBoardSlots = [...slots].map((id, index): [string, string] => {\n      return [id, puzzleImageRoutes[index]];\n    });\n    const shuffledSlotsImages = [...originalBoardSlots].sort(shuffleItems);\n\n    shuffledBoardSlotsWithEmptySlot = [\n      ...shuffledSlotsImages,\n      ['empty-slot', undefined],\n    ];\n\n    addSlots(shuffledSlotsImages);\n  }\n\n  function getMovementDisponibility(\n    clickedSlot: number,\n    emptySlot: number,\n  ): boolean {\n    const canMoveUp = emptySlot - clickedSlot === -width;\n    const canMoveDown = emptySlot - clickedSlot === width;\n    const canMoveRight = emptySlot - clickedSlot === 1;\n    const canMoveLeft = emptySlot - clickedSlot === -1;\n\n    if (clickedSlot <= 3 && (canMoveDown || canMoveRight || canMoveLeft)) {\n      return true;\n    }\n\n    if (clickedSlot >= 12 && (canMoveUp || canMoveRight || canMoveLeft)) {\n      return true;\n    }\n\n    if (canMoveUp || canMoveDown || canMoveRight || canMoveLeft) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function setNewGame() {\n    removeElementsFromDOM('.piece');\n    removeElementsFromDOM('#empty-slot');\n    shuffleImagesAndCreateSlotsArray(puzzleSlots);\n    hideElement('reset');\n    clearInterval(gameTimeInterval);\n    counter = 0;\n    updateMoves(true);\n  }\n\n  function setElapsedTime() {\n    const elapsedTimeEl = document.getElementById(\n      'elapsed-time',\n    ) as HTMLSpanElement;\n\n    elapsedTimeEl.innerHTML = String(counter);\n    counter += 1;\n  }\n\n  function updateMoves(resetMoves: boolean) {\n    const movesEl = document.getElementById('moves') as HTMLSpanElement;\n    moves = resetMoves ? 0 : (moves += 1);\n    movesEl.innerHTML = String(moves);\n  }\n\n  function setListeners() {\n    onClickRestartGame(() => {\n      setNewGame();\n    });\n\n    onClickSetNewGame(() => {\n      setNewGame();\n    });\n  }\n};\n\nGameBoard();\n"]}